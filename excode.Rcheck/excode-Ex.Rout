
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "excode"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "excode-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('excode')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("excodeFamily")
> ### * excodeFamily
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: excodeFamily
> ### Title: Create a family of probability distributions for excess count
> ###   detection.
> ### Aliases: excodeFamily
> 
> ### ** Examples
> 
> 
> excode_family_pois <- excodeFamily("Poisson")
> excode_family_pois
excodeFamily: Poisson
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("excodeFamily", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("excodeFormula")
> ### * excodeFormula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: excodeFormula
> ### Title: Create a formula of the model for excess count detection
> ### Aliases: excodeFormula
> 
> ### ** Examples
> 
> 
> excode_formula_har <- excodeFormula("Harmonic")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("excodeFormula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("excodeModel")
> ### * excodeModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: excodeModel
> ### Title: Create a model for excess count detection
> ### Aliases: excodeModel
> 
> ### ** Examples
> 
> # Initialisation of a mean model without timetrend with Poisson emission
> 
> excode_formula_mean <- excodeFormula("Mean", timeTrend = FALSE)
> excode_family_pois <- excodeFamily("Poisson")
> excodeModel(excode_family_pois, excode_formula_mean)
Inital excodeModel
 excodeFamily: Poisson
 excodeFormula: Mean
No. of timepoints: 0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("excodeModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot-excodeModel-ANY-method")
> ### * plot-excodeModel-ANY-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot,excodeModel,ANY-method
> ### Title: Summary of an excodeModel.
> ### Aliases: plot,excodeModel,ANY-method
> 
> ### ** Examples
> 
> 
> # TODO
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot-excodeModel-ANY-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_model")
> ### * plot_model
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_model
> ### Title: Plot sts object with excode results
> ### Aliases: plot_model
> 
> ### ** Examples
> 
> 
> # TODO
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_model", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("run_excode")
> ### * run_excode
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: run_excode
> ### Title: Detect Excess Counts in Epidemiological Time Series
> ### Aliases: run_excode run_excode,sts,excodeModel-method
> ###   run_excode,list,excodeModel-method
> ###   run_excode,data.frame,excodeModel-method
> 
> ### ** Examples
> 
> 
> # Creating a Poisson harmonic model for the examples
> excode_family_pois <- excodeFamily("Poisson")
> excode_formula_har <- excodeFormula("Harmonic")
> excode_har_pois <- excodeModel(
+   excode_family_pois,
+   excode_formula_har
+ )
> # Example 1: Using data.frame as input time series
> data(shadar_df)
> result_shadar_har <- run_excode(shadar_df, excode_har_pois, 209:295)
> 
> 
> # Example 2: Using an sts object (from 'surveillance' package) as input time series
> library(surveillance)
Warning: package 'surveillance' was built under R version 4.4.3
Loading required package: sp
Warning: package 'sp' was built under R version 4.4.3
Loading required package: xtable
This is surveillance 1.24.1; see 'package?surveillance' or
https://surveillance.R-Forge.R-project.org/ for an overview.
> data(stsNewport)
> result_newport_har <- run_excode(stsNewport, excode_har_pois, 209:295)
> 
> # Example 3: Using a named list of two sts objects as input
> stsShadar <- surveillance::sts(shadar_df$observed,
+   epoch = shadar_df$date,
+   state = shadar_df$state
+ )
> named_list <- c("salmNewport" = stsNewport, "shadar" = stsShadar)
> result_list <- run_excode(
+   named_list,
+   excode_har_pois, 290
+ )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("run_excode", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:surveillance', 'package:xtable', 'package:sp'

> nameEx("summary-excodeModel-method")
> ### * summary-excodeModel-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary,excodeModel-method
> ### Title: Summary of an excodeModel.
> ### Aliases: summary,excodeModel-method
> 
> ### ** Examples
> 
> 
> # Looking at summary of the results using a harmonic Poisson model on the shadar_df
> ## Not run: 
> ##D #' excode_family_pois <- excodeFamily("Poisson")
> ##D excode_formula_har <- excodeFormula("Harmonic")
> ##D excode_har_pois <- excodeModel(excode_family_pois, excode_formula_har)
> ##D # perform excess count detection for time points 209:295
> ##D result_shadar_har <- run_excode(shadar_df, excode_har_pois, 209:295)
> ##D # obtain the summary of the results for the time points 209:295
> ##D summary(result_shadar_har)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary-excodeModel-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.89 1.18 21.9 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
